class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root)
            return NULL;
        if(root->val == key)
            return helper(root);
        TreeNode*root2 = root;
        while(root){
            if(root->val > key){
                if(root->left and root->left->val == key ){
                    root->left = helper(root->left);
                    break;
                }
                else
                    root=root->left;
            } else{
                if( root->right  and root->right->val == key){
                    root->right = helper(root->right);
                    break;
                }else{
                    root = root->right;
                } 
            }
        }
        return root2;
    }
    TreeNode* helper(TreeNode*root){
        if(!root->left)
            return root->right;
        else if(!root->right)
            return root->left;
        TreeNode*rightchild = root->right;
        TreeNode*lastchild = find(root->left);
        lastchild->right = rightchild;
        return root->left;
    }
    TreeNode* find(TreeNode*root){
        if(!root->right)
            return root;
        return find(root->right);
    }
};
